#ifndef ESSENTIA_IMPORTS_H
#define ESSENTIA_IMPORTS_H

#include <Core/Essentia_ECS>
#include <Core/Exceptions/Exceptions.hpp>
#include <Core/EventSystem/EventSystem.hpp>
#include <Core/EventSystem/EventListener.hpp>
#include <Core/Graphics/Shader.hpp>
#include <Core/Graphics/Texture.hpp>
#include <Core/Graphics/Vertex.hpp>
#include <Core/Graphics/TextureManager.hpp>
#include <Core/Graphics/Mesh.hpp>
#include <Framework/Components/components.hpp>
#include <Framework/Systems/systems.hpp>
#include <Framework/Camera/CameraBase.hpp>
#include <Framework/Camera/CameraOrtho.hpp>
#include <Framework/Camera/CameraPerspective.hpp>
#include <Framework/Camera/Camera2D.hpp>
#include <Framework/Input/InputManager.hpp>

#include <DebugTools>

#include <Shared/values.hpp>
#include <Shared/user_values.hpp>

using Vector2 = glm::vec2;
using Vector3 = glm::vec3;
using Vector4 = glm::vec4;
using Matrix4 = glm::mat4;
using Matrix3 = glm::mat3;
using Matrix2 = glm::mat2;
using Quaternion = glm::quat;

using Color = glm::vec4;

using GameObject = Essentia::WeakptrWrapper<Essentia::Entity>;
using Entity = Essentia::Entity;
using Scene = Essentia::Scene;
using SceneManager = Essentia::SceneManager;

template <typename T>
using EventSystem = Essentia::EventSystem<T>;
using EventListener = Essentia::EventListener;

using Transform = Essentia::Transform;
using Sprite = Essentia::Sprite;

using TextureHandle = std::shared_ptr<Essentia::Texture>;
using Vertex = Essentia::Vertex;
using Shader = Essentia::Shader;
using TextureManager = Essentia::TextureManager;
using Mesh = Essentia::Mesh;

using CameraBase = Essentia::CameraBase;
using CameraOrtho = Essentia::CameraOrtho;
using CameraPerspective = Essentia::CameraPerspective;
using Camera2D = Essentia::Camera2D;

using InputManager = Essentia::InputManager;

#endif //!ESSENTIA_IMPORTS_H